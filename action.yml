name: Terraform Stoneford
description: >
  This action runs Terraform for the Stoneford ecosystem. It can run various Terraform actions such as plan and  apply.
  It also supports running fmt and validate commands.

inputs:
  directory:
    description: The directory to run terraform in.
    required: true
  workspace:
    description: The name of the aws terraform workspace.
    required: true
  fmt:
    description: Whether to run terraform fmt.
    required: false
    default: 'false'
  validate:
    description: Whether to run terraform validate.
    required: false
    default: 'false'
  action:
    description: The terraform action to run.
    required: false
    default: ''
  metadata:
    description: >
      Whether to run terraform output in JSON format and produce a flattened "metadata" output that can be used as json
      tfvars.
    required: false
    default: 'false'
  metadata_destination:
    description: The destination directory for the metadata output. If not provided, it will not be copied.
    required: false
    default: ''
  account:
    description: The account name to run terraform in.
    required: true
  region:
    description: The region to run terraform in.
    required: false
    default: 'us-east-1'
  disable_backend:
    description: Whether to disable the terraform backend.
    required: false
    default: 'false'
  deployment_role:
    description: The deployment IAM role to use. If not provided, will skip configuring AWS.
    required: false
    default: ''
  tfvars-content:
    description: The content of the variable file to use.
    required: false
    
outputs:
  metadata:
    description: The terraform output in JSON format.
    value: ${{ steps.terraform.outputs.metadata }}
  
runs:
  using: composite
    
  steps:
    - name: Configure AWS credentials
      if: inputs.deployment_role != ''
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ inputs.deployment_role }}
        aws-region: ${{ inputs.region }}
        
    - name: Copy base s3 backend config
      shell: bash
      run: cp ${{env.SOURCE_DIR}} ${{ env.DESTINATION_DIR }}
      env:
        SOURCE_DIR: ${{ github.action_path }}/backend/s3_backend.tf
        DESTINATION_DIR: ${{ inputs.directory }}/s3_backend.tf

    - name: Copy account specific tfvars
      if: ${{ hashFiles(env.SOURCE_DIR) != '' }}
      shell: bash
      run: cp ${{env.SOURCE_DIR}} ${{ env.DESTINATION_DIR }}
      env:
        SOURCE_DIR: ${{ inputs.directory }}/env/${{ inputs.account }}.tfvars
        DESTINATION_DIR: ${{ inputs.directory }}/env.auto.tfvars
      
    - uses: hashicorp/setup-terraform@v3

    - name: Terraform
      id: terraform
      uses: 7Factor/action-terraform@v2
      with:
        directory: ${{ inputs.directory }}
        workspace: ${{ inputs.workspace }}
        init-args: ${{ inputs.metadata != 'true' && inputs.disable_backend == 'true' && '-backend=false' || '' }}
        fmt: ${{ inputs.fmt && inputs.metadata != 'true' }}
        validate: ${{ inputs.validate && inputs.metadata != 'true' }}
        action: ${{ inputs.action }}
        metadata: ${{ inputs.metadata }}
        tfbackend-content: |
          bucket = "stoneford-${{ inputs.account }}-terraform-state"
          key    = "${{ inputs.region }}/terraform.tfstate"
        tfvars-content: ${{ inputs.tfvars-content }}
        comment: ${{ inputs.metadata != 'true' }}
        comment-identifier: ${{ inputs.directory }} - ${{ inputs.account }}
        comment-header: |
          ### Terraform Results for ${{ inputs.directory }} - ${{ inputs.account }}

    - name: Create output vars file
      if: ${{ inputs.metadata == 'true' && inputs.metadata_destination != '' }}
      shell: bash
      env:
        TERRAFORM_OUTPUT: ${{ steps.terraform.metadata }}
        METADATA_DESTINATION: ./${{ inputs.metadata_destination }}/${{ inputs.workspace }}.auto.tfvars.json
      run: echo "$TERRAFORM_OUTPUT" > $METADATA_DESTINATION